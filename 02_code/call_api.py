import requests
import os
import json
from pathlib import Path

# --- CONFIGURACIÓN ---
# Tu clave de API. El script la buscará en una variable de entorno
# o te la pedirá directamente si no la encuentra.
key = os.getenv("NVCF_RUN_KEY") or input("Pega tu clave de API (Run Key) y presiona Enter: ")

# El modelo que quieres usar
url_del_modelo = "https://health.api.nvidia.com/v1/biology/arc/evo2-40b/generate"

# La secuencia de ADN que quieres completar
mi_secuencia = "TTGCATAGGTTTCTAGGGTCTGGGATTTTTGGGATTTTCCGAAAACTCCTTTCTCTAAACTGGACGGTCTCGGCGGCGACGAGACTCCCGGGTTGGGAATGTTCTTTTGCGCTGCAATCATATCCTGCTCCGGATACCGAATCGTGCGCTGCGAAATCGTCTCCGCACTTGAAGGCTGTTTCTCACCATTACTATTATTAACGCTATCTCGAACTTCCTGCTTCGGTGCCGCCGGACCTACTCTGTTATTTCCCACGAGCTGTTGTTTCTCGCTCTCTTTGCTCACTTTTACTACATCACTCGTCGCGTCGAGAACATGCCGGGTAACTCCTGAAATACTCATACTTTTCGCTCTATTTGATTCGATCGGTGGAGGTGGAGGTTTCGTACCACCTGTTCTTCTAAAGTATTCATCGTCGGCATTCAGAGAAGTAAAGGCATCTTTTCGCTCGCCTTCAGTTGACGATTTGGGAGAATAAGCCTCCCAGTTTTGCGGGTCGAGAGGATCGGCAATCACTGCACCTCTTTTTAACATCGAAACAGTTTCTTCGTTATCGTCGTTTGCGCGCGTGTTTCTCTCTGTATCTTGTCCTTCTCCGTCTTCTTCCACGACTTTCGAAAGCGAAGAAGAAGACGTTTCCTTTTTTCTCACAAATGATGCGCGCTTTCCACTCTCTTCTTCTTCTCGCTTGTCGAACATCTCCTCATTTCTTTCTTGCACGTCTAATGAAGTCTCGTTCACTTTTGGAGTGATGTCATCATCAGAATCTAACAAATCTACGAGATCGTCCATGTCGTGTGGTGTGTCTCTTCTGCGCGCCAACTTTCTGAAGAATCGGAATTTGTTTCTCACCTTCTCTTCTCTTTTTTCCATCACACAAACACACGCCCAACGTCACTTTTGACGCGTACATATATACTCTTGGCTTTTGGCTTTTGGGTGATGTCAAGTCATGATGCGCGTACTGGACGATCTCAACAGAGATACGACGACGAGAATAAACGAAGACTGATTGCCGGTACCATTCCATTCCGATTCACGCGCGGAGAAACTAAGGCAGAAAAAGACGAAACCGTTAAGAAGGACAGTGCCGCGACGACGATGGAGACAAATAGCAAGAACAATAGTAATGTAGAAGTACTCGTGATTAGCTGTAGACGGAAACCGGATAAACGATCTTTCCCGAAAGGAGGATGGGAGCTCGATGAAACCGTGGAAGAAGCCGCGCGAAGGGAAACTTTAGAGGAAGCAGGTGTATCGAGCGCGGTTCCTTTAATACCTATTTCGACAAACACAGGTGGTATACAATACGAAAGCAAATCAAACCCGATGGGATGTACTGCACACTTCTTCTTGATGCGCGTGACCGAACAGAGCGAAAAATGGGCGGAAGATTCTATTCGAGTGCGGGAATGGGTGTCCATCGAGCGAGCGAAAGATGTTTTGAAACAGAAATGGATGAAAGATATTCTAGATGAAGCCGCGATTAGGGGTTTGTTTTTCGAATGATAATAATTAAAGCTCAATAAATAGCTCCTACTGCGCGCGCTTGCCGTTACATATTTCTAACTCTGCTTGTTTTTGTTGCTACTACTAATTACTTTTATCTTCTTCGGTCTCGATTCGTCGCTAAAAATGACTCCCGTGTTCTTGAGAAAATCAGCAACGCCGCGTAACAAAATCATATCTTCGTCGTTGAAGTACGGAGACTTTAAGGAGTTCGACGGTTTGTTACCACCAAGTTTCGAGGGTCTGCTGGAAGGCAAAAAACGAAACGCTTCTCTAAATTCTTTTGGCCCAGCTTTGATGGGCGCATCGAAATGGCACGGCACGATTCGGTTAAAGTTCCATTTTGCGACGCGCTGTGCCCAATCGTTGACGTAGTCCGGAACGTTTTCGTACACCAACGTCGCAACCACAGGAGCAACGAACAAGCGATTGGTCACGTCTTTCCAACTCTCTTCCGGATCCAGGAGGTTATTTGGACCAAAATATAAAGCCTGCAGAGCATTTCG" # <-- PUEDES CAMBIAR ESTA SECUENCIA

# Parámetros de la generación
parametros = {
    "sequence": mi_secuencia,
    "num_tokens": 100, # Número de nucleótidos a generar
    "top_k": 4,
}
# --- FIN DE LA CONFIGURACIÓN ---

print(f"Enviando la secuencia '{mi_secuencia}' al modelo de Nvidia...")

# Se define la cabecera de autorización con tu clave
headers = {
    "Authorization": f"Bearer {key}"
}

try:
    response = requests.post(url=url_del_modelo, headers=headers, json=parametros)
    response.raise_for_status() # Lanza un error si la petición falla

    # Ruta de salida organizada
    ruta_salida = Path("../03_out/output.json")
    
    print(f"Respuesta recibida. Guardando en '{ruta_salida}'...")
    
    # Crea el directorio de salida si no existe
    ruta_salida.parent.mkdir(exist_ok=True)
    
    # Guardamos la respuesta en un archivo para analizarla
    ruta_salida.write_text(json.dumps(response.json(), indent=2))
    
    print("\n--- Resultado de la API ---")
    respuesta_json = response.json()
    print(json.dumps(respuesta_json, indent=2))
    print("\n¡Éxito! El resultado completo está en el archivo.")

    secuencia_generada = respuesta_json.get("sequence", "")
    secuencia_completa = mi_secuencia + secuencia_generada

    print("\n--- Secuencia Completa (Prompt + Generación) ---")
    print(secuencia_completa)

except requests.exceptions.HTTPError as err:
    print(f"\n--- ERROR ---")
    print(f"Error en la petición HTTP: {err}")
    print(f"Cuerpo de la respuesta: {err.response.text}")
except Exception as e:
    print(f"\n--- ERROR ---")
    print(f"Ha ocurrido un error inesperado: {e}")
